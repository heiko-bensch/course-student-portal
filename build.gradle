plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.netflix.nebula.release' version '19.0.10'
    id "com.google.cloud.tools.jib" version "3.4.3"
    id "com.github.spotbugs" version "6.0.22"
    id 'jacoco'
}

group = 'de.bensch'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    implementation('org.webjars:bootstrap:5.3.3')
    implementation 'org.flywaydb:flyway-core'
  //  implementation 'org.flywaydb:flyway-database-postgresql'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    //developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    developmentOnly'com.h2database:h2'
    //runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

def githubUsername = project.findProperty('githubUsername') ?: 'default_username'
def imageName = project.findProperty('imageName') ?: 'default_image'

jib {
    to {
        image = "ghcr.io/${githubUsername}/${imageName}"
        tags = [project.version.toString(), 'latest']
        container {
            jvmFlags = ['-Xms512m', '-Xdebug', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseContainerSupport']
            mainClass = 'de.bensch.course.CourseApplication'
            ports = ['8080']
        }
    }
}

spotbugs {
    ignoreFailures = true
    showStackTraces = false
    showProgress = true
}

spotbugsMain {
    reports.create("html") {
        required = true

        outputLocation = file("${layout.buildDirectory.get().asFile}/reports/spotbugs.html")
        setStylesheet("fancy-hist.xsl")
    }
    reports.create("xml") {
        required = true
        outputLocation = file("${layout.buildDirectory.get().asFile}/reports/spotbugs.xml")
    }
}

jacocoTestReport {
    reports {
        xml.outputLocation = file("${layout.buildDirectory.get().asFile}/reports/jacoco/jacoco.xml")
        html.outputLocation = file("${layout.buildDirectory.get().asFile}/reports/jacoco/html")
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

