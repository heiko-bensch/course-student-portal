import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'
    alias(libs.plugins.spring.boot.gradle.plugin)
    alias(libs.plugins.nebula.release)
    alias(libs.plugins.jib)
    alias(libs.plugins.spotbugs)
    alias(libs.plugins.gradle.git.properties)
    alias(libs.plugins.sonarqube)
    id 'jacoco'

}

group = 'de.bensch'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

springBoot {
    buildInfo()
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}


dependencies {
    implementation platform(SpringBootPlugin.BOM_COORDINATES)
    implementation libs.spring.boot.starter.data.jpa
    implementation libs.spring.boot.starter.thymeleaf
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.security
    implementation libs.spring.boot.starter.oauth2.client
    implementation libs.spring.boot.starter.actuator

    implementation libs.thymeleaf.extras.springsecurity6
    implementation libs.commons.lang3

    implementation libs.poi
    implementation libs.poi.ooxml
    implementation libs.fastexcel.reader
    implementation libs.fastexcel

//    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    implementation libs.webjars.bootstrap
    implementation libs.webjars.font.awesome
    implementation libs.webjars.jquery
    implementation libs.webjars.locator.core

    implementation libs.flyway.core
    implementation libs.flyway.database.postgresql
    developmentOnly libs.spring.boot.devtools
    developmentOnly libs.spring.boot.docker.compose
    developmentOnly libs.h2
    runtimeOnly libs.postgresql

    compileOnly libs.lombok
    annotationProcessor libs.lombok

    implementation libs.mapstruct
    annotationProcessor libs.mapstruct.processor
    annotationProcessor libs.lombok.mapstruct.binding

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    testImplementation libs.spring.boot.starter.test
    testImplementation libs.spring.security.test

    testRuntimeOnly libs.junit.platform.launcher
    testRuntimeOnly libs.h2
    testImplementation libs.datafaker
}
tasks.named('test') {
    useJUnitPlatform()
}

def githubUsername = project.findProperty('githubUsername') ?: 'default_username'
def imageName = project.findProperty('imageName') ?: 'default_image'

jib {
    to {
        image = "ghcr.io/${githubUsername}/${imageName}"
        tags = [project.version.toString(), 'latest']
        container {
            jvmFlags = ['-Xms512m', '-Xdebug', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseContainerSupport']
            mainClass = 'de.bensch.course.CourseApplication'
            ports = ['8080']
        }
    }
    from {
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }
    }
}

spotbugs {
    maxHeapSize = "1g"
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
}

spotbugsMain {
    reports.create("html") {
        required = true

        outputLocation = file("${layout.buildDirectory.get().asFile}/reports/spotbugs/spotbugs.html")
        setStylesheet("fancy-hist.xsl")
    }
    reports.create("xml") {
        required = true
        outputLocation = file("${layout.buildDirectory.get().asFile}/reports/spotbugs/spotbugs.xml")
    }
    excludeFilter = file('config/spotbugs/excludeFilter.xml')
}

jacocoTestReport {
    reports {
        xml.required = true
        xml.outputLocation = file("${layout.buildDirectory.get().asFile}/reports/jacoco/jacoco.xml")
        html.outputLocation = file("${layout.buildDirectory.get().asFile}/reports/jacoco/html")
    }
}


test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

